{"version":3,"sources":["webpack://checkout/./src/app/ui/form/CheckboxInput.tsx","webpack://checkout/./src/app/address/isEqualAddress.ts","webpack://checkout/./src/app/address/getFormFieldInputId.ts","webpack://checkout/./src/app/shipping/getShippableItemsCount.ts","webpack://checkout/./src/app/ui/dropdown/DropdownTrigger.tsx","webpack://checkout/./src/app/ui/form/TextArea.tsx","webpack://checkout/./src/app/ui/form/RadioInput.tsx","webpack://checkout/./src/app/address/DynamicInput.tsx","webpack://checkout/./src/app/address/MultiCheckboxControl.tsx","webpack://checkout/./src/app/address/CheckboxGroupFormField.tsx","webpack://checkout/./src/app/address/DynamicFormField.tsx","webpack://checkout/./src/app/address/AddressFormField.tsx","webpack://checkout/./src/app/address/mapAddressFromFormValues.ts","webpack://checkout/./src/app/address/isValidCustomerAddress.ts","webpack://checkout/./src/app/address/AddressSelect.tsx","webpack://checkout/./src/app/orderComments/OrderComments.tsx","webpack://checkout/./src/app/address/googleAutocomplete/AddressSelector.ts","webpack://checkout/./src/app/address/googleAutocomplete/AddressSelectorUk.ts","webpack://checkout/./src/app/address/googleAutocomplete/AddressSelectorFactory.ts","webpack://checkout/./src/app/ui/popover/Popover.tsx","webpack://checkout/./src/app/ui/popover/PopoverList.tsx","webpack://checkout/./src/app/address/googleAutocomplete/getGoogleAutocompleteScriptLoader.ts","webpack://checkout/./src/app/ui/autocomplete/Autocomplete.tsx","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocompleteScriptLoader.ts","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocompleteService.ts","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocomplete.tsx","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocompleteFormField.tsx","webpack://checkout/./src/app/address/AddressForm.tsx","webpack://checkout/./src/app/address/googleAutocomplete/mapToAddress.ts"],"names":["CheckboxInput","ref","additionalClassName","label","id","rest","className","type","htmlFor","isEqualAddress","address1","address2","normalizeAddress","address","customFields","filter","fieldValue","ADDRESS_FIELD_IDS","postalCode","stateOrProvince","stateOrProvinceCode","getFormFieldLegacyName","name","getFormFieldInputId","getShippableItemsCount","cart","lineItems","physicalItems","item","addedByPromotion","state","shouldShow","handleClick","event","handleClose","nativeEvent","handleOpen","setState","document","addEventListener","removeEventListener","componentWillUnmount","this","render","children","placement","dropdown","onClick","modifiers","hide","enabled","flip","preventOverflow","style","width","zIndex","defaultProps","TextArea","testId","value","checked","Input","Label","fieldType","onChange","options","placeholder","handleDateChange","date","target","DynamicFormFieldType","map","key","optionValue","radio","length","checkbox","Array","isArray","includes","autoComplete","calendarClassName","maxDate","max","Date","undefined","minDate","min","placeholderText","popperClassName","selected","multiline","TextInput","password","onSelectedAll","onSelectedNone","handleSelectAllClick","preventDefault","handleSelectNoneClick","TranslatedString","href","MultiCheckboxFormField","form","values","errors","pop","push","remove","handleSelectAll","checkedValues","forEach","val","handleSelectNone","handleInputChange","indexOf","FormFieldContainer","hasError","FormFieldError","renderField","renderProps","LABEL","city","company","countryCode","firstName","lastName","phone","AUTOCOMPLETE","field","custom","required","maxLength","parentFieldName","addressFieldName","fieldInputId","fieldName","translatedLabelString","fieldLabel","renderInput","items","helperLabel","rows","FormField","input","getDynamicFormFieldType","secret","number","text","mapAddressFromFormValues","formValues","customFieldsObject","padMonth","getMonth","toString","padDay","getDate","getFullYear","fieldId","isValidCustomerAddress","addresses","formFields","customerAddress","handleSelectAddress","newAddress","onSelectAddress","selectedAddress","handleUseNewAddress","onUseNewAddress","role","AddressSelectMenu","AddressSelectButton","AddressSelect","renderLabel","hidden","legend","googlePlace","address_components","_name","_address","getState","_get","getStreet","getStreet2","getCity","getCountry","getPostCode","access","element","find","types","create","autocompleteData","addressSelector","getItemClassName","highlightedIndex","index","classes","join","instance","getItemProps","menuProps","content","stateReducer","changes","stateChangeTypes","blurInput","blurButton","mouseUp","touchEnd","inputValue","changeInput","isOpen","keyDownEnter","handleStateChange","onToggleOpen","inputProps","initialValue","initialHighlightedIndex","onSelect","listTestId","defaultHighlightedIndex","initialInputValue","itemToString","onStateChange","getInputProps","getMenuProps","toPopoverItem","highlightItem","highlightedSlices","lastIndex","reduce","node","slice","i","offset","notHighlightedLength","substr","_scriptLoader","loadMapsSdk","apiKey","_googleAutoComplete","Promise","resolve","reject","params","window","autocompleteWindow","Boolean","google","maps","places","isAutocompleteWindow","loadScript","catch","e","_apiKey","getAutocompleteService","_autocompletePromise","then","googleMapsSdk","AutocompleteService","Error","getPlacesServices","createElement","_placesPromise","PlacesService","props","fields","nextElement","googleAutocompleteService","service","getDetails","placeId","result","focus","isAutocompleteEnabled","resetAutocomplete","setAutocomplete","setItems","componentRestrictions","getPlacePredictions","results","toAutocompleteItems","description","structured_formatting","main_text","matched_substrings","place_id","supportedCountries","labelContent","country","PLACEHOLDER","AUTOCOMPLETE_FIELD_NAME","containerRef","handleDynamicFormFieldChange","syncNonFormikValue","handleAutocompleteChange","handleAutocompleteSelect","place","countries","setFieldValue","accessor","c","code","street2","stateName","states","subdivisions","mapToAddress","autocompleteValue","dateFormFieldNames","componentDidMount","current","querySelector","language","countriesWithAutocomplete","googleMapsApiKey","onAutocompleteToggle","translatedPlaceholderId","AddressFormField","translate","withLanguage"],"mappings":"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","file":"billing~shipping-380b16cf.js","sourcesContent":["import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport Input, { InputProps } from './Input';\nimport Label from './Label';\n\nexport interface CheckboxInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst CheckboxInput = forwardRef((\n    {\n        additionalClassName,\n        label,\n        id,\n        ...rest\n    }: CheckboxInputProps,\n    ref: Ref<HTMLInputElement>\n) => (\n    <>\n        <Input\n            { ...rest }\n            className={ classNames(\n                'form-checkbox',\n                'optimizedCheckout-form-checkbox',\n                additionalClassName\n            ) }\n            id={ id }\n            ref={ ref }\n            type=\"checkbox\"\n        />\n        <Label htmlFor={ id }>\n            { label }\n        </Label>\n    </>\n));\n\nexport default CheckboxInput;\n","import { Address, AddressRequestBody, BillingAddress, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport { isEqual, omit } from 'lodash';\n\ntype ComparableAddress = CustomerAddress | Address | BillingAddress | AddressRequestBody;\ntype ComparableAddressFields = keyof CustomerAddress | keyof Address | keyof BillingAddress;\n\nexport default function isEqualAddress(address1?: ComparableAddress, address2?: ComparableAddress): boolean {\n    if (!address1 || !address2) {\n        return false;\n    }\n\n    return isEqual(\n        normalizeAddress(address1),\n        normalizeAddress(address2)\n    );\n}\n\nfunction normalizeAddress(address: ComparableAddress) {\n    const ignoredFields: ComparableAddressFields[] = ['id', 'stateOrProvinceCode', 'type', 'email'];\n\n    return omit(\n        {\n            ...address,\n            customFields: (address.customFields || []).filter(({ fieldValue }) => !!fieldValue),\n        },\n        ignoredFields\n    );\n}\n","import { AddressKeyMap } from './DynamicFormField';\n\nexport const ADDRESS_FIELD_IDS: AddressKeyMap = {\n    address1: 'addressLine1',\n    address2: 'addressLine2',\n    postalCode: 'postCode',\n    stateOrProvince: 'province',\n    stateOrProvinceCode: 'provinceCode',\n};\n\nexport function getFormFieldLegacyName(name: string): string {\n    return `${ADDRESS_FIELD_IDS[name] || name}`;\n}\n\nexport function getFormFieldInputId(name: string): string {\n    return `${getFormFieldLegacyName(name)}Input`;\n}\n","import { Cart } from '@bigcommerce/checkout-sdk';\n\nimport getLineItemsCount from './getLineItemsCount';\n\nexport default function getShippableItemsCount(cart: Cart): number {\n    return getLineItemsCount(cart.lineItems.physicalItems.filter(item => !item.addedByPromotion));\n}\n","import { Placement } from 'popper.js';\nimport React, { Component, MouseEventHandler, ReactNode } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\nexport interface DropdownTriggerProps {\n    placement?: Placement;\n    dropdown: ReactNode;\n}\n\nexport interface DropdownTriggerState {\n    shouldShow: boolean;\n}\n\nexport default class DropdownTrigger extends Component<DropdownTriggerProps, DropdownTriggerState> {\n    static defaultProps = {\n        placement: 'bottom-start',\n    };\n\n    state: Readonly<DropdownTriggerState> = {\n        shouldShow: false,\n    };\n\n    componentWillUnmount(): void {\n        document.removeEventListener('click', this.handleClose);\n    }\n\n    render() {\n        const { children, placement, dropdown } = this.props;\n        const { shouldShow } = this.state;\n\n        return (\n            <Manager>\n                <Reference>\n                    { ({ ref }) => (\n                        <div\n                            className=\"dropdownTrigger\"\n                            onClick={ this.handleClick }\n                            ref={ ref }\n                        >\n                            { children }\n                        </div>\n                    ) }\n                </Reference>\n\n                <Popper\n                    modifiers={ {\n                        hide: { enabled: false },\n                        flip: { enabled: false },\n                        preventOverflow: { enabled: false },\n                    } }\n                    placement={ placement }\n                >\n                    { ({ ref, style }) => !shouldShow ? null : (\n                        <div\n                            className=\"dropdownMenu\"\n                            ref={ ref }\n                            style={ {\n                                ...style,\n                                width: '100%',\n                                zIndex: 1,\n                            } }\n                        >\n                            { dropdown }\n                        </div>\n                    ) }\n                </Popper>\n            </Manager>\n        );\n    }\n\n    private handleClick: MouseEventHandler<HTMLElement> = event => {\n        const { shouldShow } = this.state;\n\n        if (shouldShow) {\n            this.handleClose(event.nativeEvent);\n        } else {\n            this.handleOpen(event.nativeEvent);\n        }\n    };\n\n    private handleOpen: (event: MouseEvent) => void = () => {\n        const { shouldShow } = this.state;\n\n        if (shouldShow) {\n            return;\n        }\n\n        this.setState({ shouldShow: true }, () => {\n            document.addEventListener('click', this.handleClose);\n        });\n    };\n\n    private handleClose: (event: MouseEvent) => void = () => {\n        const { shouldShow } = this.state;\n\n        if (!shouldShow) {\n            return;\n        }\n\n        this.setState({ shouldShow: false }, () => {\n            document.removeEventListener('click', this.handleClose);\n        });\n    };\n}\n","import classNames from 'classnames';\nimport React, { forwardRef, Ref, TextareaHTMLAttributes } from 'react';\n\nexport interface TextAreaProps extends TextareaHTMLAttributes<HTMLTextAreaElement> {\n    additionalClassName?: string;\n    testId?: string;\n}\n\nconst TextArea = forwardRef((\n    { additionalClassName, testId, className, ...rest }: TextAreaProps,\n    ref: Ref<HTMLTextAreaElement>\n) => (\n    <textarea\n        { ...rest }\n        className={ className || classNames(\n            'form-input',\n            'optimizedCheckout-form-input',\n            additionalClassName\n        ) }\n        data-test={ testId }\n        ref={ ref }\n    />\n));\n\nexport default TextArea;\n","import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport Input, { InputProps } from './Input';\nimport Label from './Label';\n\nexport interface RadioInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst RadioInput = forwardRef((\n    {\n        additionalClassName,\n        label,\n        value,\n        checked,\n        id,\n        ...rest\n    }: RadioInputProps,\n    ref: Ref<HTMLInputElement>\n) => (\n    <>\n        <Input\n            { ...rest }\n            checked={ checked }\n            className={ classNames(\n                'form-radio',\n                'optimizedCheckout-form-radio',\n                additionalClassName\n            ) }\n            id={ id }\n            ref={ ref }\n            type=\"radio\"\n            value={ value }\n        />\n        <Label htmlFor={ id }>\n            { label }\n        </Label>\n    </>\n));\n\nexport default RadioInput;\n","import { FormFieldItem } from '@bigcommerce/checkout-sdk';\nimport { isDate, noop } from 'lodash';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\nimport ReactDatePicker from 'react-datepicker';\n\nimport { CheckboxInput, InputProps, RadioInput, TextArea, TextInput } from '../ui/form';\n\nimport DynamicFormFieldType from './DynamicFormFieldType';\n\nexport interface DynamicInputProps extends InputProps {\n    id: string;\n    additionalClassName?: string;\n    value?: string | string[];\n    rows?: number;\n    fieldType?: DynamicFormFieldType;\n    options?: FormFieldItem[];\n}\n\nconst DynamicInput: FunctionComponent<DynamicInputProps> = ({\n    additionalClassName,\n    fieldType,\n    id,\n    name,\n    onChange = noop,\n    options,\n    placeholder,\n    value,\n    ...rest\n}) => {\n    const handleDateChange = useCallback((date, event) => onChange({\n        ...event,\n        target: {\n            name,\n            value: date,\n        },\n    }), [\n        onChange,\n        name,\n    ]);\n\n    switch (fieldType) {\n    case DynamicFormFieldType.dropdown:\n        return (\n            <select\n                { ...rest as any }\n                className=\"form-select optimizedCheckout-form-select\"\n                data-test={ `${id}-select` }\n                id={ id }\n                name={ name }\n                onChange={ onChange }\n                value={ value === null ? '' : value }\n            >\n                { placeholder &&\n                    <option value=\"\">\n                        { placeholder }\n                    </option> }\n                { options && options.map(({ label, value: optionValue }) =>\n                    <option\n                        key={ optionValue }\n                        value={ optionValue }\n                    >\n                        { label }\n                    </option>\n                ) }\n            </select>\n        );\n\n    case DynamicFormFieldType.radio:\n        if (!options || !options.length) {\n            return null;\n        }\n\n        return <>\n            { options.map(({ label, value: optionValue }) =>\n                <RadioInput\n                    { ...rest }\n                    checked={ optionValue === value }\n                    id={ `${id}-${optionValue}` }\n                    key={ optionValue }\n                    label={ label }\n                    name={ name }\n                    onChange={ onChange }\n                    testId={ `${id}-${optionValue}-radio` }\n                    value={ optionValue }\n                />) }\n        </>;\n\n    case DynamicFormFieldType.checkbox:\n        if (!options || !options.length) {\n            return null;\n        }\n\n        return <>\n            { options.map(({ label, value: optionValue }) =>\n                <CheckboxInput\n                    { ...rest }\n                    checked={ Array.isArray(value) ? value.includes(optionValue) : false }\n                    id={ `${id}-${optionValue}` }\n                    key={ optionValue }\n                    label={ label }\n                    name={ name }\n                    onChange={ onChange }\n                    testId={ `${id}-${optionValue}-checkbox` }\n                    value={ optionValue }\n                />) }\n        </>;\n\n    case DynamicFormFieldType.date:\n        return (\n            <ReactDatePicker\n                { ...rest as any }\n                autoComplete=\"off\"\n                // FIXME: we can avoid this by simply using onChangeRaw, but it's not being triggered properly\n                // https://github.com/Hacker0x01/react-datepicker/issues/1357\n                // onChangeRaw={ rest.onChange }\n                calendarClassName=\"optimizedCheckout-contentPrimary\"\n                className=\"form-input optimizedCheckout-form-input\"\n                maxDate={ rest.max ? new Date(`${rest.max} 00:00:00`) : undefined }\n                minDate={ rest.min ? new Date(`${rest.min} 00:00:00`) : undefined }\n                name={ name }\n                onChange={ handleDateChange }\n                placeholderText=\"MM/DD/YYYY\"\n                popperClassName=\"optimizedCheckout-contentPrimary\"\n                selected={ isDate(value) ? value : undefined }\n            />\n        );\n\n    case DynamicFormFieldType.multiline:\n        return (\n            <TextArea\n                { ...rest as any }\n                id={ id }\n                name={ name }\n                onChange={ onChange }\n                testId={ `${id}-text` }\n                type={ fieldType }\n                value={ value }\n            />\n        );\n\n    default:\n        return (\n            <TextInput\n                { ...rest }\n                id={ id }\n                name={ name }\n                onChange={ onChange }\n                testId={ `${id}-${ fieldType === DynamicFormFieldType.password ?\n                    'password' :\n                    'text' }` }\n                type={ fieldType }\n                value={ value }\n            />\n        );\n    }\n};\n\nexport default memo(DynamicInput);\n","import React, { memo, useCallback, FunctionComponent, MouseEvent } from 'react';\n\nimport { TranslatedString } from '../locale';\n\nimport './MultiCheckboxControl.scss';\n\nexport interface MultiCheckboxControlProps {\n    testId?: string;\n    onSelectedAll(): void;\n    onSelectedNone(): void;\n}\n\nconst MultiCheckboxControl: FunctionComponent<MultiCheckboxControlProps> = ({\n    testId,\n    onSelectedAll,\n    onSelectedNone,\n}) => {\n    const handleSelectAllClick = useCallback((event: MouseEvent) => {\n        event.preventDefault();\n        onSelectedAll();\n    }, [onSelectedAll]);\n\n    const handleSelectNoneClick = useCallback((event: MouseEvent) => {\n        event.preventDefault();\n        onSelectedNone();\n    }, [onSelectedNone]);\n\n    return <ul className=\"multiCheckbox--controls\">\n        <li className=\"multiCheckbox--control\">\n            <TranslatedString id=\"address.select\" />\n        </li>\n\n        <li className=\"multiCheckbox--control\">\n            <a\n                data-test={ `${testId}Checkbox-all-button` }\n                href=\"#\"\n                onClick={ handleSelectAllClick }\n            >\n                <TranslatedString id=\"address.select_all\" />\n            </a>\n        </li>\n\n        <li className=\"multiCheckbox--control\">\n            <a\n                data-test={ `${testId}Checkbox-none-button` }\n                href=\"#\"\n                onClick={ handleSelectNoneClick }\n            >\n                <TranslatedString id=\"address.select_none\" />\n            </a>\n        </li>\n    </ul>;\n};\n\nexport default memo(MultiCheckboxControl);\n","import { FormFieldItem } from '@bigcommerce/checkout-sdk';\nimport { getIn, FieldArray, FieldArrayRenderProps } from 'formik';\nimport { difference, kebabCase, noop, pick } from 'lodash';\nimport React, { memo, useCallback, ChangeEvent, FunctionComponent, ReactNode } from 'react';\n\nimport { FormFieldContainer, FormFieldError } from '../ui/form';\n\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport DynamicInput from './DynamicInput';\nimport MultiCheckboxControl from './MultiCheckboxControl';\n\nexport interface CheckboxGroupFormFieldProps {\n    id: string;\n    label: ReactNode;\n    name: string;\n    options: FormFieldItem[];\n    onChange?(values: string[]): void;\n}\n\ntype MultiCheckboxFormFieldProps = (\n    CheckboxGroupFormFieldProps &\n    Pick<FieldArrayRenderProps, 'push' | 'remove' | 'pop' | 'form'>\n);\n\nconst MultiCheckboxFormField: FunctionComponent<MultiCheckboxFormFieldProps> = ({\n    form: { values, errors },\n    id,\n    label,\n    name,\n    onChange = noop,\n    options,\n    pop,\n    push,\n    remove,\n}) => {\n    const handleSelectAll = useCallback(() => {\n        const checkedValues: string[] = getIn(values, name) || [];\n\n        difference(options.map(({ value }) => value), checkedValues)\n            .forEach(val => push(val));\n\n        onChange(getIn(values, name));\n    }, [\n        name,\n        onChange,\n        options,\n        push,\n        values,\n    ]);\n\n    const handleSelectNone = useCallback(() => {\n        const checkedValues: string[] = getIn(values, name) || [];\n\n        checkedValues.forEach(() => pop());\n\n        onChange(getIn(values, name));\n    }, [\n        name,\n        onChange,\n        pop,\n        values,\n    ]);\n\n    const handleInputChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        const checkedValues: string[] = getIn(values, name) || [];\n        const { value, checked } = event.target;\n\n        if (checked) {\n            push(value);\n        } else {\n            remove(checkedValues.indexOf(value));\n        }\n\n        onChange(getIn(values, name));\n    }, [\n        name,\n        onChange,\n        push,\n        remove,\n        values,\n    ]);\n\n    return <FormFieldContainer hasError={ getIn(errors, name) && getIn(errors, name).length }>\n        { label }\n\n        <MultiCheckboxControl\n            onSelectedAll={ handleSelectAll }\n            onSelectedNone={ handleSelectNone }\n            testId={ id }\n        />\n\n        <DynamicInput\n            fieldType={ DynamicFormFieldType.checkbox }\n            id={ id }\n            name={ name }\n            onChange={ handleInputChange }\n            options={ options }\n            value={ getIn(values, name) || [] }\n        />\n\n        <FormFieldError\n            name={ name }\n            testId={ `${kebabCase(name)}-field-error-message` }\n        />\n    </FormFieldContainer>;\n};\n\nconst CheckboxGroupFormField: FunctionComponent<CheckboxGroupFormFieldProps> = ({\n    id,\n    label,\n    name,\n    onChange,\n    options,\n}) => {\n    const renderField = useCallback((renderProps: FieldArrayRenderProps) => (\n        <MultiCheckboxFormField\n            id={ id }\n            label={ label }\n            name={ name }\n            onChange={ onChange }\n            options={ options }\n            { ...pick(renderProps, [\n                'form',\n                'pop',\n                'push',\n                'remove',\n            ]) }\n        />\n    ), [\n        id,\n        label,\n        name,\n        onChange,\n        options,\n    ]);\n\n    return <FieldArray\n        name={ name }\n        render={ renderField }\n    />;\n};\n\nexport default memo(CheckboxGroupFormField);\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { FormField, Label } from '../ui/form';\n\nimport { getFormFieldInputId, getFormFieldLegacyName } from './getFormFieldInputId';\nimport CheckboxGroupFormField from './CheckboxGroupFormField';\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport DynamicInput from './DynamicInput';\n\nexport interface AddressKeyMap<T = string> {\n    [fieldName: string]: T;\n}\n\nconst LABEL: AddressKeyMap = {\n    address1: 'address.address_line_1_label',\n    address2: 'address.address_line_2_label',\n    city: 'address.city_label',\n    company: 'address.company_name_label',\n    countryCode: 'address.country_label',\n    firstName: 'address.first_name_label',\n    lastName: 'address.last_name_label',\n    phone: 'address.phone_number_label',\n    postalCode: 'address.postal_code_label',\n    stateOrProvince: 'address.state_label',\n    stateOrProvinceCode: 'address.state_label',\n};\n\nconst AUTOCOMPLETE: AddressKeyMap = {\n    address1: 'address-line1',\n    address2: 'address-line2',\n    city: 'address-level2',\n    company: 'organization',\n    countryCode: 'country',\n    firstName: 'given-name',\n    lastName: 'family-name',\n    phone: 'tel',\n    postalCode: 'postal-code',\n    stateOrProvince: 'address-level1',\n    stateOrProvinceCode: 'address-level1',\n};\n\nexport interface DynamicFormFieldOption {\n    code: string;\n    name: string;\n}\n\nexport interface DynamicFormFieldProps {\n    field: FormFieldType;\n    parentFieldName?: string;\n    placeholder?: string;\n    fieldType?: DynamicFormFieldType;\n    onChange?(value: string | string[]): void;\n}\n\nconst DynamicFormField: FunctionComponent<DynamicFormFieldProps>  = ({\n    field: {\n        name,\n        label: fieldLabel,\n        custom,\n        required,\n        options,\n        max,\n        min,\n        maxLength,\n    },\n    fieldType,\n    parentFieldName,\n    onChange,\n    placeholder,\n}) => {\n    const addressFieldName = name;\n    const fieldInputId = getFormFieldInputId(addressFieldName);\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\n    const translatedLabelString = LABEL[name];\n\n    const label = useMemo(() => (\n        <Label htmlFor={ fieldInputId }>\n            { custom ?\n                fieldLabel :\n                translatedLabelString && <TranslatedString id={ translatedLabelString } /> }\n            { !required &&\n                <>\n                    { '' }\n                    <small className=\"optimizedCheckout-contentSecondary\">\n                        <TranslatedString id=\"common.optional_text\" />\n                    </small>\n                </> }\n        </Label>\n    ), [\n        custom,\n        fieldInputId,\n        fieldLabel,\n        required,\n        translatedLabelString,\n    ]);\n\n    const renderInput = useCallback(({ field }: FieldProps<string>) => (\n        <DynamicInput\n            { ...field }\n            autoComplete={ AUTOCOMPLETE[addressFieldName] }\n            fieldType={ fieldType }\n            id={ fieldInputId }\n            max={ max }\n            maxLength={ maxLength || undefined }\n            min={ min }\n            options={ options && options.items }\n            placeholder={ placeholder || (options && options.helperLabel) }\n            rows={ options && (options as any).rows }\n        />\n    ), [\n        addressFieldName,\n        fieldInputId,\n        fieldType,\n        max,\n        maxLength,\n        min,\n        options,\n        placeholder,\n    ]);\n\n    return (\n        <div className={ `dynamic-form-field dynamic-form-field--${getFormFieldLegacyName(addressFieldName)}` }>\n            { fieldType === DynamicFormFieldType.checkbox ?\n                <CheckboxGroupFormField\n                    id={ fieldInputId }\n                    label={ label }\n                    name={ fieldName }\n                    onChange={ onChange }\n                    options={ (options && options.items) || [] }\n                /> :\n                <FormField\n                    input={ renderInput }\n                    label={ label }\n                    name={ fieldName }\n                    onChange={ onChange }\n                /> }\n        </div>\n    );\n};\n\nexport default memo(DynamicFormField);\n","import { FormField } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport DynamicFormField from './DynamicFormField';\nimport DynamicFormFieldType from './DynamicFormFieldType';\n\ninterface AddressFormFieldProps {\n    field: FormField;\n    parentFieldName?: string;\n    placeholder?: string;\n    onChange?(value: string | string[]): void;\n}\n\nfunction getDynamicFormFieldType({\n    fieldType,\n    type,\n    secret,\n}: FormField): DynamicFormFieldType {\n    if (fieldType === 'text') {\n        if (type === 'integer') {\n            return DynamicFormFieldType.number;\n        }\n\n        return secret ?\n            DynamicFormFieldType.password :\n            DynamicFormFieldType.text;\n    }\n\n    return fieldType as DynamicFormFieldType;\n}\n\nconst AddressFormField: FunctionComponent<AddressFormFieldProps> = ({\n    field,\n    parentFieldName,\n    placeholder,\n    onChange,\n}) => (\n    <DynamicFormField\n        field={ field }\n        fieldType={ getDynamicFormFieldType(field) }\n        onChange={ onChange }\n        parentFieldName={ parentFieldName }\n        placeholder={ placeholder }\n    />\n);\n\nexport default AddressFormField;\n","import { Address } from '@bigcommerce/checkout-sdk';\nimport { forIn, isDate, padStart } from 'lodash';\n\nimport { AddressFormValues } from './mapAddressToFormValues';\n\nexport default function mapAddressFromFormValues(formValues: AddressFormValues): Address {\n    const { customFields: customFieldsObject, ...address } = formValues;\n    const customFields: Array<{fieldId: string; fieldValue: string}> = [];\n\n    forIn(customFieldsObject, (value, key) => {\n        let fieldValue: string;\n\n        if (isDate(value)) {\n            const padMonth = padStart((value.getMonth() + 1).toString(), 2, '0');\n            const padDay = padStart((value.getDate()).toString(), 2, '0');\n            fieldValue = `${value.getFullYear()}-${padMonth}-${padDay}`;\n        } else {\n            fieldValue = value;\n        }\n\n        customFields.push({\n            fieldId: key,\n            fieldValue,\n        });\n    });\n\n    return {\n        ...address,\n        customFields,\n    };\n}\n","import { Address, CustomerAddress, FormField } from '@bigcommerce/checkout-sdk';\nimport { some } from 'lodash';\n\nimport isEqualAddress from './isEqualAddress';\nimport isValidAddress from './isValidAddress';\n\nexport default function isValidCustomerAddress(\n    address: Address | undefined,\n    addresses: CustomerAddress[],\n    formFields: FormField[]\n): boolean {\n    if (!address || !isValidAddress(address, formFields)) {\n        return false;\n    }\n\n    return some(addresses, customerAddress => isEqualAddress(customerAddress, address));\n}\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport React, { memo, FunctionComponent, PureComponent, ReactNode } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { TranslatedString } from '../locale';\nimport { DropdownTrigger } from '../ui/dropdown';\n\nimport isEqualAddress from './isEqualAddress';\nimport './AddressSelect.scss';\nimport StaticAddress from './StaticAddress';\n\nexport interface AddressSelectProps {\n    addresses: CustomerAddress[];\n    selectedAddress?: Address;\n    onSelectAddress(address: Address): void;\n    onUseNewAddress(currentAddress?: Address): void;\n}\n\nclass AddressSelect extends PureComponent<AddressSelectProps> {\n    render(): ReactNode {\n        const {\n            addresses,\n            selectedAddress,\n        } = this.props;\n\n        return (\n            <div className=\"form-field\">\n                <div className=\"dropdown--select\" role=\"combobox\">\n                    <DropdownTrigger\n                        dropdown={\n                            <AddressSelectMenu\n                                addresses={ addresses }\n                                onSelectAddress={ this.handleSelectAddress }\n                                onUseNewAddress={ this.handleUseNewAddress }\n                                selectedAddress={ selectedAddress }\n                            />\n                        }\n                    >\n                        <AddressSelectButton\n                            addresses={ addresses }\n                            selectedAddress={ selectedAddress }\n                        />\n                    </DropdownTrigger>\n                </div>\n            </div>\n        );\n    }\n\n    private handleSelectAddress: (newAddress: Address) => void = (newAddress: Address) => {\n        const {\n            onSelectAddress,\n            selectedAddress,\n        } = this.props;\n\n        if (!isEqualAddress(selectedAddress, newAddress)) {\n            onSelectAddress(newAddress);\n        }\n    };\n\n    private handleUseNewAddress: () => void = () => {\n        const {\n            selectedAddress,\n            onUseNewAddress,\n        } = this.props;\n\n        onUseNewAddress(selectedAddress);\n    };\n}\n\nconst AddressSelectMenu: FunctionComponent<AddressSelectProps> = ({\n    addresses,\n    onSelectAddress,\n    onUseNewAddress,\n    selectedAddress,\n}) => (\n    <ul\n        className=\"dropdown-menu instrumentSelect-dropdownMenu\"\n        id=\"addressDropdown\"\n    >\n        <li className=\"dropdown-menu-item dropdown-menu-item--select\">\n            <a href=\"#\" onClick={ preventDefault(() => onUseNewAddress(selectedAddress)) }>\n                <TranslatedString id=\"address.enter_address_action\" />\n            </a>\n        </li>\n        { addresses.map(address => (\n            <li\n                className=\"dropdown-menu-item dropdown-menu-item--select\"\n                key={ address.id }\n            >\n                <a href=\"#\" onClick={ preventDefault(() => onSelectAddress(address)) }>\n                    <StaticAddress address={ address } />\n                </a>\n            </li>\n        )) }\n    </ul>\n);\n\ntype AddressSelectButtonProps = Pick<AddressSelectProps, 'selectedAddress' | 'addresses'>;\n\nconst AddressSelectButton: FunctionComponent<AddressSelectButtonProps> = ({\n    selectedAddress,\n}) => (\n    <a\n        className=\"button dropdown-button dropdown-toggle--select\"\n        href=\"#\"\n        id=\"addressToggle\"\n        onClick={ preventDefault() }\n    >\n        { selectedAddress ?\n            <StaticAddress address={ selectedAddress } /> :\n            <TranslatedString id=\"address.enter_address_action\" /> }\n    </a>\n);\n\nexport default memo(AddressSelect);\n","import { FieldProps } from 'formik';\nimport React, { useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { Fieldset, FormField, Label, Legend, TextInput } from '../ui/form';\n\nconst OrderComments: FunctionComponent = () => {\n    const renderLabel = useCallback(name => (\n        <Label hidden htmlFor={ name }>\n            <TranslatedString id=\"shipping.order_comment_label\" />\n        </Label>\n    ), []);\n\n    const renderInput = useCallback(({ field }: FieldProps) => (\n        <TextInput\n            { ...field }\n            autoComplete={ 'off' }\n            maxLength={ 2000 }\n        />\n    ), []);\n\n    const legend = useMemo(() => (\n        <Legend>\n            <TranslatedString id=\"shipping.order_comment_label\" />\n        </Legend>\n    ), []);\n\n    return <Fieldset legend={ legend } testId=\"checkout-shipping-comments\">\n        <FormField\n            input={ renderInput }\n            label={ renderLabel }\n            name=\"orderComment\"\n        />\n    </Fieldset>;\n};\n\nexport default OrderComments;\n","import { GoogleAddressFieldType } from './googleAutocompleteTypes';\n\nexport default class AddressSelector {\n    protected _address: google.maps.GeocoderAddressComponent[] | undefined;\n    protected _name: string;\n\n    constructor(\n        googlePlace: google.maps.places.PlaceResult\n    ) {\n        const { address_components, name } = googlePlace;\n\n        this._name = name;\n        this._address = address_components;\n    }\n\n    getState(): string {\n        return this._get('administrative_area_level_1', 'short_name');\n    }\n\n    getStreet(): string {\n        return this._name;\n    }\n\n    getStreet2(): string {\n        return '';\n    }\n\n    getCity(): string {\n        return this._get('postal_town', 'long_name') ||\n            this._get('locality', 'long_name') ||\n            this._get('neighborhood', 'short_name');\n    }\n\n    getCountry(): string {\n        return this._get('country', 'short_name');\n    }\n\n    getPostCode(): string {\n        return this._get('postal_code', 'short_name');\n    }\n\n    protected _get(\n        type: GoogleAddressFieldType,\n        access: Exclude<keyof google.maps.GeocoderAddressComponent, 'types'>\n    ): string {\n        const element = this._address && this._address.find(field => field.types.indexOf(type) !== -1);\n\n        if (element) {\n            return element[access];\n        }\n\n        return '';\n    }\n}\n","import AddressSelector from './AddressSelector';\n\nexport default class AddressSelectorUK extends AddressSelector {\n    getState(): string {\n        return this._get('administrative_area_level_2', 'long_name');\n    }\n\n    getStreet2(): string {\n        return this._get('locality', 'long_name');\n    }\n}\n","import AddressSelector from './AddressSelector';\nimport AddressSelectorUK from './AddressSelectorUk';\n\nexport default class AddressSelectorFactory {\n    static create(autocompleteData: google.maps.places.PlaceResult): AddressSelector {\n        const addressSelector = new AddressSelector(autocompleteData);\n\n        switch (addressSelector.getCountry()) {\n        case 'GB':\n            return new AddressSelectorUK(autocompleteData);\n        }\n\n        return addressSelector;\n    }\n}\n","import React, { FunctionComponent } from 'react';\n\nimport './Popover.scss';\n\nexport interface PopoverProps {\n    children: React.ReactNode;\n}\n\nconst Popover: FunctionComponent<PopoverProps> = ({ children }) => {\n    return (\n        <div className=\"popover\">\n            { children }\n        </div>\n    );\n};\n\nexport default Popover;\n","import React, { memo, FunctionComponent } from 'react';\n\nimport './PopoverList.scss';\n\nexport interface PopoverListProps {\n    menuProps?: any;\n    highlightedIndex?: number;\n    getItemProps?: any;\n    items: PopoverListItem[];\n    testId?: string;\n}\n\nexport interface PopoverListItem {\n    id: string;\n    content: React.ReactChild[] | React.ReactChild;\n}\n\nconst PopoverList: FunctionComponent<PopoverListProps> = ({\n    highlightedIndex = -1,\n    testId,\n    getItemProps = (props: any) => props,\n    menuProps = {},\n    items,\n}) => {\n    if (!items || !items.length) {\n        return null;\n    }\n\n    return (\n        <ul\n            className=\"popoverList\"\n            data-test={ testId } { ...menuProps }\n        >\n            { items\n                .map((item, index) => (\n                    <li\n                        className={ getItemClassName(highlightedIndex, index) }\n                        data-test={ testId && `${testId}-item` }\n                        { ...getItemProps({\n                            key: item.id,\n                            index,\n                            item,\n                        }) }\n                        key={ index }\n                    >\n                        { item.content }\n                    </li>\n                )) }\n        </ul>\n    );\n};\n\nfunction getItemClassName(highlightedIndex: number, index: number): string {\n    const classes = ['popoverList-item'];\n\n    if (highlightedIndex === index) {\n        classes.push('is-active');\n    }\n\n    return classes.join(' ');\n}\n\nexport default memo(PopoverList);\n","import GoogleAutocompleteScriptLoader from './GoogleAutocompleteScriptLoader';\n\nlet instance: GoogleAutocompleteScriptLoader;\n\nexport default function getGoogleAutocompleteScriptLoader(): GoogleAutocompleteScriptLoader {\n    if (!instance) {\n        instance = new GoogleAutocompleteScriptLoader();\n    }\n\n    return instance;\n}\n","import Downshift, { DownshiftState, StateChangeOptions } from 'downshift';\nimport { isNumber, noop } from 'lodash';\nimport React, { Fragment, PureComponent, ReactChild, ReactNode } from 'react';\n\nimport { Popover, PopoverList, PopoverListItem } from '../popover';\n\nimport AutocompleteItem from './autocomplete-item';\n\nexport interface AutocompleteProps {\n    initialValue?: string;\n    initialHighlightedIndex?: number;\n    children?: ReactNode;\n    items: AutocompleteItem[];\n    inputProps?: any;\n    listTestId?: string;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onSelect?(item: AutocompleteItem): void;\n    onChange?(value: string, isOpen: boolean): void;\n}\n\nclass Autocomplete extends PureComponent<AutocompleteProps> {\n    render(): ReactNode {\n        const {\n            inputProps,\n            initialValue,\n            initialHighlightedIndex,\n            items,\n            children,\n            onSelect,\n            listTestId,\n        } = this.props;\n\n        return (\n            <Downshift\n                defaultHighlightedIndex={ 0 }\n                initialHighlightedIndex={ initialHighlightedIndex }\n                initialInputValue={ initialValue }\n                itemToString={ this.itemToString }\n                onChange={ onSelect }\n                onStateChange={ this.handleStateChange }\n                stateReducer={ this.stateReducer }\n            >\n                { ({\n                    isOpen,\n                    getInputProps,\n                    getMenuProps,\n                    getItemProps,\n                    highlightedIndex,\n                }) => (\n                    <div>\n                        <input\n                            { ...getInputProps() }\n                            { ...inputProps }\n                        />\n                        { isOpen && !!items.length &&\n                            <Popover>\n                                <PopoverList\n                                    getItemProps={ getItemProps }\n                                    highlightedIndex={ isNumber(highlightedIndex) ? highlightedIndex : -1 }\n                                    items={ items.map(item => this.toPopoverItem(item)) }\n                                    menuProps={ getMenuProps() }\n                                    testId={ listTestId }\n                                />\n                                { children }\n                            </Popover> }\n                    </div>\n                ) }\n            </Downshift>\n        );\n    }\n\n    private toPopoverItem(item: AutocompleteItem): PopoverListItem {\n        return {\n            ...item,\n            content: this.highlightItem(item),\n        };\n    }\n\n    private highlightItem(item: AutocompleteItem): ReactChild[] | ReactChild {\n        if (!item.highlightedSlices || !item.highlightedSlices.length) {\n            return item.label;\n        }\n\n        let lastIndex: number = 0;\n        let key = 0;\n\n        return item.highlightedSlices.reduce((node, slice, i) => {\n            const { label } = item;\n            const { offset, length } = slice;\n            const notHighlightedLength = offset - lastIndex;\n\n            if (notHighlightedLength) {\n                node.push(<Fragment key={ key }>\n                    { label.substr(lastIndex, notHighlightedLength) }\n                </Fragment>);\n                key += 1;\n            }\n\n            lastIndex  = offset + length;\n\n            node.push(<strong key={ key }>{ label.substr(offset, length) }</strong>);\n            key += 1;\n\n            if (i === (item.highlightedSlices || []).length - 1) {\n                node.push(<Fragment key={ key }>\n                    { label.substr(lastIndex) }\n                </Fragment>);\n                key += 1;\n            }\n\n            return node;\n        }, [] as ReactChild[]);\n    }\n\n    private itemToString(item?: AutocompleteItem): string {\n        return item && item.value || '';\n    }\n\n    private stateReducer: (\n        state: DownshiftState<AutocompleteItem>,\n        changes: StateChangeOptions<AutocompleteItem>\n    ) => Partial<StateChangeOptions<AutocompleteItem>> = (state, changes) => {\n        const { onChange } = this.props;\n\n        switch (changes.type) {\n        case Downshift.stateChangeTypes.blurInput:\n        case Downshift.stateChangeTypes.blurButton:\n        case Downshift.stateChangeTypes.mouseUp:\n        case Downshift.stateChangeTypes.touchEnd:\n            return {\n                ...changes,\n                inputValue: state.inputValue,\n            };\n\n        case Downshift.stateChangeTypes.changeInput:\n            if (changes.inputValue !== state.inputValue && onChange) {\n                onChange(changes.inputValue || '', state.isOpen);\n            }\n\n            return changes;\n\n        case Downshift.stateChangeTypes.keyDownEnter:\n            return changes;\n\n        default:\n            return changes;\n        }\n        };\n\n    private handleStateChange = ({ isOpen, inputValue }: StateChangeOptions<string>) => {\n        const { onToggleOpen = noop } = this.props;\n\n        if (isOpen !== undefined) {\n            onToggleOpen({ isOpen, inputValue: inputValue || '' });\n        }\n    };\n}\n\nexport default Autocomplete;\n","import { getScriptLoader, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { GoogleAutocompleteWindow, GoogleMapsSdk } from './googleAutocompleteTypes';\n\nexport default class GoogleAutocompleteScriptLoader {\n    private _scriptLoader: ScriptLoader;\n    private _googleAutoComplete?: Promise<GoogleMapsSdk>;\n\n    constructor() {\n        this._scriptLoader = getScriptLoader();\n    }\n\n    loadMapsSdk(apiKey: string): Promise<GoogleMapsSdk> {\n        if (this._googleAutoComplete) {\n            return this._googleAutoComplete;\n        }\n\n        this._googleAutoComplete = new Promise((resolve, reject) => {\n            const callbackName = 'initAutoComplete';\n            const params = [\n                'language=en',\n                `key=${apiKey}`,\n                'libraries=places',\n                `callback=${callbackName}`,\n            ].join('&');\n\n            (window as GoogleCallbackWindow)[callbackName] = () => {\n                if (isAutocompleteWindow(window)) {\n                    resolve(window.google.maps);\n                }\n\n                reject();\n            };\n\n            this._scriptLoader.loadScript(`//maps.googleapis.com/maps/api/js?${params}`)\n                .catch(e => {\n                    this._googleAutoComplete = undefined;\n                    throw e;\n                });\n        });\n\n        return this._googleAutoComplete;\n    }\n}\n\nfunction isAutocompleteWindow(window: Window): window is GoogleAutocompleteWindow {\n    const autocompleteWindow = window as GoogleAutocompleteWindow;\n\n    return Boolean(autocompleteWindow.google &&\n        autocompleteWindow.google.maps &&\n        autocompleteWindow.google.maps.places);\n}\n\nexport interface GoogleCallbackWindow extends Window {\n    initAutoComplete?(): void;\n}\n","import getGoogleAutocompleteScriptLoader from './getGoogleAutocompleteScriptLoader';\nimport GoogleAutocompleteScriptLoader from './GoogleAutocompleteScriptLoader';\n\nexport default class GoogleAutocompleteService {\n    private _autocompletePromise?: Promise<google.maps.places.AutocompleteService>;\n    private _placesPromise?: Promise<google.maps.places.PlacesService>;\n\n    constructor(\n        private _apiKey: string,\n        private _scriptLoader: GoogleAutocompleteScriptLoader = getGoogleAutocompleteScriptLoader()\n    ) {}\n\n    getAutocompleteService(): Promise<google.maps.places.AutocompleteService> {\n        if (!this._autocompletePromise) {\n            this._autocompletePromise = this._scriptLoader.loadMapsSdk(this._apiKey)\n                .then(googleMapsSdk => {\n                    if (!googleMapsSdk.places.AutocompleteService) {\n                        throw new Error('`AutocompleteService` is undefined');\n                    }\n\n                    return new googleMapsSdk.places.AutocompleteService();\n                });\n        }\n\n        return this._autocompletePromise;\n    }\n\n    getPlacesServices(): Promise<google.maps.places.PlacesService> {\n        const node = document.createElement('div');\n\n        if (!this._placesPromise) {\n            this._placesPromise = this._scriptLoader.loadMapsSdk(this._apiKey)\n                .then(googleMapsSdk => {\n                    if (!googleMapsSdk.places.PlacesService) {\n                        throw new Error('`PlacesService` is undefined');\n                    }\n\n                    return new googleMapsSdk.places.PlacesService(node);\n                });\n        }\n\n        return this._placesPromise;\n    }\n}\n","import { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { Autocomplete, AutocompleteItem } from '../../ui/autocomplete';\n\nimport { GoogleAutocompleteOptionTypes } from './googleAutocompleteTypes';\nimport './GoogleAutocomplete.scss';\nimport GoogleAutocompleteService from './GoogleAutocompleteService';\n\ninterface GoogleAutocompleteProps {\n    initialValue?: string;\n    componentRestrictions?: google.maps.places.ComponentRestrictions;\n    fields?: string[];\n    apiKey: string;\n    nextElement?: HTMLElement;\n    inputProps?: any;\n    isAutocompleteEnabled?: boolean;\n    types?: GoogleAutocompleteOptionTypes[];\n    onSelect?(place: google.maps.places.PlaceResult, item: AutocompleteItem): void;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange?(value: string, isOpen: boolean): void;\n}\n\ninterface GoogleAutocompleteState {\n    items: AutocompleteItem[];\n    autoComplete: string;\n}\n\nclass GoogleAutocomplete extends PureComponent<GoogleAutocompleteProps, GoogleAutocompleteState> {\n    googleAutocompleteService: GoogleAutocompleteService;\n\n    constructor(props: GoogleAutocompleteProps) {\n        super(props);\n        this.googleAutocompleteService = new GoogleAutocompleteService(props.apiKey);\n        this.state = {\n            items: [],\n            autoComplete: 'off',\n        };\n    }\n\n    render(): ReactNode {\n        const {\n            initialValue,\n            onToggleOpen = noop,\n            inputProps = {},\n        } = this.props;\n\n        const {\n            autoComplete,\n            items,\n        } = this.state;\n\n        return (\n            <Autocomplete\n                initialHighlightedIndex={ 0 }\n                initialValue={ initialValue }\n                inputProps={ {\n                    ...inputProps,\n                    autoComplete,\n                } }\n                items={ items }\n                listTestId=\"address-autocomplete-suggestions\"\n                onChange={ this.onChange }\n                onSelect={ this.onSelect }\n                onToggleOpen={ onToggleOpen }\n            >\n                <div className=\"co-googleAutocomplete-footer\" />\n            </Autocomplete>\n        );\n    }\n\n    private onSelect: (item: AutocompleteItem) => void = item => {\n        const {\n            fields,\n            onSelect = noop,\n            nextElement,\n        } = this.props;\n\n        this.googleAutocompleteService.getPlacesServices().then(service => {\n            service.getDetails({\n                placeId: item.id,\n                fields: fields || ['address_components', 'name'],\n            }, result => {\n                if (nextElement) {\n                    nextElement.focus();\n                }\n\n                onSelect(result, item);\n            });\n        });\n    };\n\n    private onChange: (input: string) => void = input => {\n        const {\n            isAutocompleteEnabled,\n            onChange = noop,\n        } = this.props;\n\n        onChange(input, false);\n\n        if (!isAutocompleteEnabled) {\n            return this.resetAutocomplete();\n        }\n\n        this.setAutocomplete(input);\n        this.setItems(input);\n    };\n\n    private setItems(input: string): void {\n        if (!input) {\n            this.setState({ items: [] });\n\n            return;\n        }\n\n        const {\n            componentRestrictions,\n            types,\n        } = this.props;\n\n        this.googleAutocompleteService.getAutocompleteService().then(service => {\n            service.getPlacePredictions({\n                input,\n                types: types || ['geocode'],\n                componentRestrictions,\n            }, results =>\n                this.setState({ items: this.toAutocompleteItems(results) })\n            );\n        });\n    }\n\n    private resetAutocomplete(): void {\n        this.setState({\n            items: [],\n            autoComplete: 'off',\n        });\n    }\n\n    private setAutocomplete(input: string): void {\n        this.setState({\n            ...this.state,\n            autoComplete: input && input.length ? 'nope' : 'off',\n        });\n    }\n\n    private toAutocompleteItems(results?: google.maps.places.AutocompletePrediction[]): AutocompleteItem[] {\n        return (results || []).map(result => ({\n            label: result.description,\n            value: result.structured_formatting.main_text,\n            highlightedSlices: result.matched_substrings,\n            id: result.place_id,\n        }));\n    }\n}\n\nexport default GoogleAutocomplete;\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../../locale';\nimport { AutocompleteItem } from '../../ui/autocomplete';\nimport { FormField } from '../../ui/form';\nimport { getFormFieldInputId } from '../getFormFieldInputId';\n\nimport GoogleAutocomplete from './GoogleAutocomplete';\n\nexport interface GoogleAutocompleteFormFieldProps {\n    apiKey: string;\n    field: FormFieldType;\n    countryCode?: string;\n    supportedCountries: string[];\n    nextElement?: HTMLElement;\n    parentFieldName?: string;\n    onSelect(place: google.maps.places.PlaceResult, item: AutocompleteItem): void;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange(value: string, isOpen: boolean): void;\n}\n\nconst GoogleAutocompleteFormField: FunctionComponent<GoogleAutocompleteFormFieldProps>  = ({\n    field: {\n        name,\n    },\n    countryCode,\n    supportedCountries,\n    parentFieldName,\n    nextElement,\n    apiKey,\n    onSelect,\n    onChange,\n    onToggleOpen,\n}) => {\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\n\n    const labelContent = useMemo(() => (\n        <TranslatedString id=\"address.address_line_1_label\" />\n    ), []);\n\n    const inputProps = useMemo(() => ({\n        className: 'form-input optimizedCheckout-form-input',\n        id: getFormFieldInputId(name),\n    }), [name]);\n\n    const renderInput = useCallback(({ field }: FieldProps) => (\n        <GoogleAutocomplete\n            apiKey={ apiKey }\n            componentRestrictions={ countryCode ?\n                { country: countryCode } :\n                undefined }\n            initialValue={ field.value }\n            inputProps={ inputProps }\n            isAutocompleteEnabled={ countryCode ?\n                supportedCountries.indexOf(countryCode) > -1 :\n                false }\n            nextElement={ nextElement }\n            onChange={ onChange }\n            onSelect={ onSelect }\n            onToggleOpen={ onToggleOpen }\n        />\n    ), [\n        apiKey,\n        countryCode,\n        inputProps,\n        nextElement,\n        onChange,\n        onSelect,\n        onToggleOpen,\n        supportedCountries,\n    ]);\n\n    return (\n        <div className={ `dynamic-form-field dynamic-form-field--addressLineAutocomplete` }>\n            <FormField\n                input={ renderInput }\n                labelContent={ labelContent }\n                name={ fieldName }\n            />\n        </div>\n    );\n};\n\nexport default memo(GoogleAutocompleteFormField);\n","import { Address, Country, FormField } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { forIn, noop } from 'lodash';\nimport React, { createRef, Component, ReactNode, RefObject } from 'react';\n\nimport { withLanguage, WithLanguageProps } from '../locale';\nimport { AutocompleteItem } from '../ui/autocomplete';\n\nimport { mapToAddress, GoogleAutocompleteFormField } from './googleAutocomplete';\nimport './AddressForm.scss';\nimport AddressFormField from './AddressFormField';\nimport { AddressKeyMap } from './DynamicFormField';\nimport DynamicFormFieldType from './DynamicFormFieldType';\n\nexport interface AddressFormProps {\n    fieldName?: string;\n    countryCode?: string;\n    countriesWithAutocomplete?: string[];\n    countries?: Country[];\n    formFields: FormField[];\n    googleMapsApiKey?: string;\n    onAutocompleteSelect?(address: Partial<Address>): void;\n    onAutocompleteToggle?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange?(fieldName: string, value: string | string[]): void;\n    setFieldValue?(fieldName: string, value: string | string[]): void;\n}\n\nconst PLACEHOLDER: AddressKeyMap = {\n    countryCode: 'address.select_country_action',\n    stateOrProvince: 'address.select_state_action',\n    stateOrProvinceCode: 'address.select_state_action',\n};\n\nconst AUTOCOMPLETE_FIELD_NAME = 'address1';\n\nclass AddressForm extends Component<AddressFormProps & WithLanguageProps> {\n    private containerRef: RefObject<HTMLElement> = createRef();\n    private nextElement?: HTMLElement | null;\n\n    private handleDynamicFormFieldChange: (name: string) => (value: string | string[]) => void = memoize(name => value => {\n        this.syncNonFormikValue(name, value);\n    });\n\n    componentDidMount(): void {\n        const { current } = this.containerRef;\n\n        if (current) {\n            this.nextElement = current.querySelector<HTMLElement>('[autocomplete=\"address-line2\"]');\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            formFields,\n            fieldName,\n            language,\n            countriesWithAutocomplete,\n            countryCode,\n            googleMapsApiKey,\n            onAutocompleteToggle,\n        } = this.props;\n\n        return (\n            <div className=\"checkout-address\" ref={ this.containerRef as RefObject<HTMLDivElement> }>\n                { formFields.map(field => {\n                    const addressFieldName = field.name;\n                    const translatedPlaceholderId = PLACEHOLDER[addressFieldName];\n\n                    if (addressFieldName === 'address1' && googleMapsApiKey && countriesWithAutocomplete) {\n                        return (\n                            <GoogleAutocompleteFormField\n                                apiKey={ googleMapsApiKey }\n                                countryCode={ countryCode }\n                                field={ field }\n                                key={ field.id }\n                                nextElement={ this.nextElement || undefined }\n                                onChange={ this.handleAutocompleteChange }\n                                onSelect={ this.handleAutocompleteSelect }\n                                onToggleOpen={ onAutocompleteToggle }\n                                parentFieldName={ fieldName }\n                                supportedCountries={ countriesWithAutocomplete }\n                            />\n                        );\n                    }\n\n                    return (\n                        <AddressFormField\n                            field={ field }\n                            // stateOrProvince can sometimes be a dropdown or input, so relying on id is not sufficient\n                            key={ `${field.id}-${field.name}` }\n                            onChange={ this.handleDynamicFormFieldChange(addressFieldName) }\n                            parentFieldName={ field.custom ?\n                                (fieldName ? `${fieldName}.customFields` : 'customFields') :\n                                fieldName }\n                            placeholder={ translatedPlaceholderId && language.translate(translatedPlaceholderId) }\n                        />\n                    );\n                }) }\n            </div>\n        );\n    }\n\n    private handleAutocompleteChange: (value: string, isOpen: boolean) => void = (value, isOpen) => {\n        if (!isOpen) {\n            this.syncNonFormikValue(AUTOCOMPLETE_FIELD_NAME, value);\n        }\n    };\n\n    private handleAutocompleteSelect: (\n        place: google.maps.places.PlaceResult,\n        item: AutocompleteItem\n    ) => void = (place, { value: autocompleteValue }) => {\n        const {\n            countries,\n            setFieldValue = noop,\n            onChange = noop,\n        } = this.props;\n\n        const address = mapToAddress(place, countries);\n\n        forIn(address, (value, fieldName) => {\n            setFieldValue(fieldName, value as string);\n            onChange(fieldName, value as string);\n        });\n\n        if (autocompleteValue) {\n            this.syncNonFormikValue(AUTOCOMPLETE_FIELD_NAME, autocompleteValue);\n        }\n    };\n\n    // because autocomplete state is controlled by Downshift, we need to manually keep formik\n    // value in sync when autocomplete value changes\n    private syncNonFormikValue: (\n        fieldName: string,\n        value: string | string[]\n    ) => void = (fieldName, value) => {\n        const {\n            formFields,\n            setFieldValue = noop,\n            onChange = noop,\n        } = this.props;\n\n        const dateFormFieldNames = formFields\n            .filter(field => field.custom && field.fieldType === DynamicFormFieldType.date)\n            .map(field => field.name);\n\n        if (fieldName === AUTOCOMPLETE_FIELD_NAME || dateFormFieldNames.indexOf(fieldName) > -1) {\n            setFieldValue(fieldName, value);\n        }\n\n        onChange(fieldName, value);\n    };\n}\n\nexport default withLanguage(AddressForm);\n","import { Address, Country, Region } from '@bigcommerce/checkout-sdk';\n\nimport AddressSelectorFactory from './AddressSelectorFactory';\n\nexport default function mapToAddress(\n    autocompleteData: google.maps.places.PlaceResult,\n    countries: Country[] = []\n): Partial<Address> {\n    if (!autocompleteData || !autocompleteData.address_components) {\n        return {};\n    }\n\n    const accessor = AddressSelectorFactory.create(autocompleteData);\n    const state = accessor.getState();\n    const countryCode = accessor.getCountry();\n    const country = countries && countries.find(c => countryCode === c.code);\n    const street2 = accessor.getStreet2();\n\n    return {\n        address2: street2,\n        city: accessor.getCity(),\n        countryCode,\n        postalCode: accessor.getPostCode(),\n        ...state ? getState(state, country && country.subdivisions) : {},\n    };\n}\n\nfunction getState(\n    stateName: string,\n    states: Region[] = []\n): Partial<Address> {\n    const state = states.find(({ code, name }: Region) =>\n        code === stateName || name === stateName\n    );\n\n    if (!state) {\n        return {\n            stateOrProvince: !states.length ? stateName : '',\n            stateOrProvinceCode: '',\n        };\n    }\n\n    return {\n        stateOrProvince: state.name,\n        stateOrProvinceCode: state.code,\n    };\n}\n"],"sourceRoot":""}