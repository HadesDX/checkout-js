{"version":3,"sources":["webpack://checkout/./src/app/ui/form/CheckboxInput.tsx","webpack://checkout/./src/app/ui/form/CheckboxFormField.tsx","webpack://checkout/./src/app/common/utility/parseAnchor.ts","webpack://checkout/./src/app/privacyPolicy/PrivacyPolicyField.tsx","webpack://checkout/./src/app/customer/EmailField.tsx","webpack://checkout/./src/app/customer/SubscribeField.tsx","webpack://checkout/./src/app/customer/GuestForm.tsx","webpack://checkout/./src/app/privacyPolicy/getPrivacyPolicyValidationSchema.ts","webpack://checkout/./src/app/locale/TranslatedLink.tsx","webpack://checkout/./src/app/customer/validationPatterns.ts","webpack://checkout/./src/app/ui/icon/IconEye.tsx","webpack://checkout/./src/app/ui/icon/IconEyeSlash.tsx","webpack://checkout/./src/app/customer/PasswordField.tsx","webpack://checkout/./src/app/customer/LoginForm.tsx","webpack://checkout/./src/app/customer/mapErrorMessage.ts","webpack://checkout/./src/app/customer/Customer.tsx"],"names":["CheckboxInput","ref","additionalClassName","label","id","rest","className","type","htmlFor","labelContent","onChange","name","renderField","field","checked","value","testId","render","parseAnchor","text","div","document","createElement","innerHTML","anchor","querySelector","anchorSiblings","split","outerHTML","PrivacyPolicyCheckboxFieldLink","url","CheckboxFormField","TranslatedHtml","data","Fieldset","renderInput","props","TextInput","autoComplete","TranslatedString","FormField","input","requiresMarketingConsent","Input","Label","withLanguage","mapPropsToValues","email","defaultShouldSubscribe","shouldSubscribe","privacyPolicy","handleSubmit","values","onContinueAsGuest","validationSchema","language","privacyPolicyUrl","translate","max","required","baseSchema","concat","isRequired","schemaFields","oneOf","getPrivacyPolicyValidationSchema","canSubscribe","checkoutButtons","isContinuingAsGuest","onChangeEmail","onShowLogin","fieldProps","Form","legend","Legend","hidden","BasicFormField","PrivacyPolicyField","Button","isLoading","variant","Primary","onClick","translatedString","parsedString","href","preventDefault","EMAIL_REGEXP","withIconContainer","viewBox","xmlns","d","forgotPasswordUrl","Toggle","openByDefault","isOpen","toggle","footer","rel","target","password","onSignIn","matches","canCancel","createAccountUrl","isSigningIn","onCancel","signInError","viewType","changeEmailLink","Alert","Error","error","body","mapErrorMessage","key","CustomerViewType","SuggestedLogin","Info","Login","CancellableEnforcedLogin","EnforcedLogin","handleContinueAsGuest","formValues","this","continueAsGuest","onChangeViewType","onContinueAsGuestError","trim","acceptsMarketingNewsletter","undefined","acceptsAbandonedCartEmails","getCustomer","hasAccount","isGuest","draftEmail","status","handleSignIn","credentials","signIn","onSignInError","handleCancelSignIn","clearError","Guest","handleChangeEmail","handleShowLogin","componentDidMount","onReady","renderGuestForm","renderLoginForm","checkEmbeddedSupport","checkoutButtonIds","deinitializeCustomer","initializeCustomer","onUnhandledError","CheckoutButtonList","deinitialize","initialize","methodIds","onError","isGuestEnabled","mapToWithCheckoutCustomerProps","checkoutService","checkoutState","getBillingAddress","getCheckout","getConfig","getSignInError","statuses","billingAddress","checkout","customer","config","checkoutSettings","shopperConfig","showNewsletterSignup","remoteCheckoutProviders","links","createAccountLink","defaultNewsletterSignup","firstName","forgotPasswordLink","guestCheckoutEnabled","signInCustomer","withCheckout"],"mappings":"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","file":"customer-fc15edb7.js","sourcesContent":["import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport Input, { InputProps } from './Input';\nimport Label from './Label';\n\nexport interface CheckboxInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst CheckboxInput = forwardRef((\n    {\n        additionalClassName,\n        label,\n        id,\n        ...rest\n    }: CheckboxInputProps,\n    ref: Ref<HTMLInputElement>\n) => (\n    <>\n        <Input\n            { ...rest }\n            className={ classNames(\n                'form-checkbox',\n                'optimizedCheckout-form-checkbox',\n                additionalClassName\n            ) }\n            id={ id }\n            ref={ ref }\n            type=\"checkbox\"\n        />\n        <Label htmlFor={ id }>\n            { label }\n        </Label>\n    </>\n));\n\nexport default CheckboxInput;\n","import { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { memo, useCallback, Fragment, FunctionComponent, ReactNode } from 'react';\n\nimport BasicFormField from './BasicFormField';\nimport CheckboxInput from './CheckboxInput';\nimport FormFieldError from './FormFieldError';\n\nexport interface CheckboxFormFieldProps {\n    additionalClassName?: string;\n    name: string;\n    id?: string;\n    labelContent: ReactNode;\n    onChange?(isChecked: boolean): void;\n}\n\nconst CheckboxFormField: FunctionComponent<CheckboxFormFieldProps> = ({\n    additionalClassName,\n    labelContent,\n    onChange,\n    name,\n    id,\n}) => {\n    const renderField = useCallback(({ field }: FieldProps) => (\n        <Fragment>\n            { <CheckboxInput\n                { ...field }\n                checked={ !!field.value }\n                id={ id || field.name }\n                label={ labelContent }\n            /> }\n\n            <FormFieldError\n                name={ name }\n                testId={ `${kebabCase(name)}-field-error-message` }\n            />\n        </Fragment>\n    ), [\n        id,\n        labelContent,\n        name,\n    ]);\n\n    return <BasicFormField\n        additionalClassName={ additionalClassName }\n        name={ name }\n        onChange={ onChange }\n        render={ renderField }\n    />;\n};\n\nexport default memo(CheckboxFormField);\n","export default function parseAnchor(text: string): string[] {\n    const div = document.createElement('div');\n    div.innerHTML = text;\n\n    const anchor = div.querySelector('a');\n\n    if (!anchor) {\n        return [];\n    }\n\n    const anchorSiblings = div.innerHTML.split(anchor.outerHTML);\n\n    return [ anchorSiblings[0], anchor.text, anchorSiblings[1] ];\n}\n","import React, { memo, FunctionComponent } from 'react';\n\nimport { TranslatedHtml } from '../locale';\nimport { CheckboxFormField, Fieldset } from '../ui/form';\n\nconst PrivacyPolicyCheckboxFieldLink: FunctionComponent<{ url: string }> = ({\n    url,\n}) => (\n    <CheckboxFormField\n        labelContent={ <TranslatedHtml data={ { url } } id=\"privacy_policy.label\" /> }\n        name=\"privacyPolicy\"\n    />\n);\n\nconst PrivacyPolicyFieldset: FunctionComponent<{ url: string }> = ({\n    url,\n}) => (\n    <Fieldset additionalClassName=\"checkout-privacy-policy\">\n        <PrivacyPolicyCheckboxFieldLink url={ url } />\n    </Fieldset>\n);\n\nexport default memo(PrivacyPolicyFieldset);\n","import { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { FormField, TextInput } from '../ui/form';\n\nexport interface EmailFieldProps {\n    onChange?(value: string): void;\n}\n\nconst EmailField: FunctionComponent<EmailFieldProps>  = ({\n    onChange,\n}) => {\n    const renderInput = useCallback((props: FieldProps) => (\n        <TextInput\n            { ...props.field }\n            autoComplete={ props.field.name }\n            id={ props.field.name }\n            type=\"email\"\n        />\n    ), []);\n\n    const labelContent = useMemo(() => (\n        <TranslatedString id=\"customer.email_label\" />\n    ), []);\n\n    return <FormField\n        input={ renderInput }\n        labelContent={ labelContent }\n        name=\"email\"\n        onChange={ onChange }\n    />;\n};\n\nexport default memo(EmailField);\n","import { FieldProps } from 'formik';\nimport React, { memo, Fragment, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { Input, Label } from '../ui/form';\n\nexport type SubscribeFieldProps = FieldProps<boolean> & {\n    requiresMarketingConsent: boolean;\n};\n\nconst SubscribeField: FunctionComponent<SubscribeFieldProps> = ({ field, requiresMarketingConsent }) => (\n    <Fragment>\n        <Input\n            { ...field }\n            checked={ field.value }\n            className=\"form-checkbox\"\n            id={ field.name }\n            type=\"checkbox\"\n        />\n\n        <Label htmlFor={ field.name }>\n            <TranslatedString id={ requiresMarketingConsent ?\n                'customer.guest_marketing_consent' :\n                'customer.guest_subscribe_to_newsletter_text' }\n            />\n        </Label>\n    </Fragment>\n);\n\nexport default memo(SubscribeField);\n","import { withFormik, FieldProps, FormikProps } from 'formik';\nimport React, { memo, useCallback, FunctionComponent, ReactNode } from 'react';\nimport { object, string } from 'yup';\n\nimport { withLanguage, TranslatedHtml, TranslatedString, WithLanguageProps } from '../locale';\nimport { getPrivacyPolicyValidationSchema, PrivacyPolicyField } from '../privacyPolicy';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { BasicFormField, Fieldset, Form, Legend  } from '../ui/form';\n\nimport EmailField from './EmailField';\nimport SubscribeField from './SubscribeField';\n\nexport interface GuestFormProps {\n    canSubscribe: boolean;\n    checkoutButtons?: ReactNode;\n    requiresMarketingConsent: boolean;\n    defaultShouldSubscribe: boolean;\n    email?: string;\n    isContinuingAsGuest: boolean;\n    privacyPolicyUrl?: string;\n    onChangeEmail(email: string): void;\n    onContinueAsGuest(data: GuestFormValues): void;\n    onShowLogin(): void;\n}\n\nexport interface GuestFormValues {\n    email: string;\n    shouldSubscribe: boolean;\n}\n\nconst GuestForm: FunctionComponent<GuestFormProps & WithLanguageProps & FormikProps<GuestFormValues>> = ({\n    canSubscribe,\n    checkoutButtons,\n    isContinuingAsGuest,\n    onChangeEmail,\n    onShowLogin,\n    privacyPolicyUrl,\n    requiresMarketingConsent,\n}) => {\n    const renderField = useCallback((fieldProps: FieldProps<boolean>) => (\n        <SubscribeField\n            { ...fieldProps }\n            requiresMarketingConsent={ requiresMarketingConsent }\n        />\n    ), [\n        requiresMarketingConsent,\n    ]);\n\n    return (\n        <Form\n            className=\"checkout-form\"\n            id=\"checkout-customer-guest\"\n            testId=\"checkout-customer-guest\"\n        >\n            <Fieldset\n                legend={\n                    <Legend hidden>\n                        <TranslatedString id=\"customer.guest_customer_text\" />\n                    </Legend>\n                }\n            >\n                <p>\n                    <TranslatedHtml id=\"customer.checkout_as_guest_text\" />\n                </p>\n\n                <div className=\"customerEmail-container\">\n                    <div className=\"customerEmail-body\">\n                        <EmailField onChange={ onChangeEmail } />\n\n                        { (canSubscribe || requiresMarketingConsent) && <BasicFormField\n                            name=\"shouldSubscribe\"\n                            render={ renderField }\n                        /> }\n\n                        { privacyPolicyUrl && <PrivacyPolicyField\n                            url={ privacyPolicyUrl }\n                        /> }\n                    </div>\n\n                    <div className=\"form-actions customerEmail-action\">\n                        <Button\n                            className=\"customerEmail-button\"\n                            id=\"checkout-customer-continue\"\n                            isLoading={ isContinuingAsGuest }\n                            testId=\"customer-continue-as-guest-button\"\n                            type=\"submit\"\n                            variant={ ButtonVariant.Primary }\n                        >\n                            <TranslatedString id=\"customer.continue_as_guest_action\" />\n                        </Button>\n                    </div>\n                </div>\n\n                <p>\n                    <TranslatedString id=\"customer.login_text\" />\n                    { ' ' }\n                    <a\n                        data-test=\"customer-continue-button\"\n                        id=\"checkout-customer-login\"\n                        onClick={ onShowLogin }\n                    >\n                        <TranslatedString id=\"customer.login_action\" />\n                    </a>\n                </p>\n\n                { checkoutButtons }\n            </Fieldset>\n        </Form>\n    );\n};\n\nexport default withLanguage(withFormik<GuestFormProps & WithLanguageProps, GuestFormValues>({\n    mapPropsToValues: ({\n        email = '',\n        defaultShouldSubscribe = false,\n        requiresMarketingConsent,\n    }) => ({\n        email,\n        shouldSubscribe: requiresMarketingConsent ? false : defaultShouldSubscribe,\n        privacyPolicy: false,\n    }),\n    handleSubmit: (values, { props: { onContinueAsGuest } }) => {\n        onContinueAsGuest(values);\n    },\n    validationSchema: ({ language, privacyPolicyUrl }: GuestFormProps & WithLanguageProps) => {\n        const email = string()\n            .email(language.translate('customer.email_invalid_error'))\n            .max(256)\n            .required(language.translate('customer.email_required_error'));\n\n        const baseSchema = object({ email });\n\n        if (privacyPolicyUrl) {\n            return baseSchema.concat(getPrivacyPolicyValidationSchema({\n                isRequired: !!privacyPolicyUrl,\n                language,\n            }));\n        }\n\n        return baseSchema;\n    },\n})(memo(GuestForm)));\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { boolean, object, BooleanSchema, ObjectSchema } from 'yup';\n\nexport interface PrivacyPolicyValidatonSchemaProps {\n    isRequired: boolean;\n    language: LanguageService;\n}\n\nexport default function getPrivacyPolicyValidationSchema({\n    isRequired,\n    language,\n}: PrivacyPolicyValidatonSchemaProps): ObjectSchema<{ privacyPolicy?: boolean }> {\n    const schemaFields: {\n        privacyPolicy?: BooleanSchema;\n    } = {};\n\n    if (isRequired) {\n        schemaFields.privacyPolicy = boolean()\n            .oneOf([true], language.translate('privacy_policy.required_error'));\n    }\n\n    return object(schemaFields);\n}\n","import React, { Fragment, FunctionComponent } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { parseAnchor } from '../common/utility';\n\nimport withLanguage, { WithLanguageProps } from './withLanguage';\nimport { TranslatedStringProps } from './TranslatedString';\n\nexport type TranslatedLinkProps = TranslatedStringProps & {\n    testId?: string;\n    onClick(): void;\n};\n\nconst TranslatedLink: FunctionComponent<TranslatedLinkProps & WithLanguageProps> = ({\n    data,\n    id,\n    language,\n    onClick,\n    testId,\n}) => {\n    const translatedString = language.translate(id, data);\n    const parsedString = parseAnchor(translatedString);\n\n    return <Fragment>\n        { parsedString[0] }\n        <a\n            data-test={ testId }\n            href=\"#\"\n            onClick={ preventDefault(onClick) }\n        >\n            { parsedString[1] }\n        </a>\n        { parsedString[2] }\n    </Fragment>;\n};\n\nexport default withLanguage(TranslatedLink);\n","// NOTE: This is a legacy regex used to create accounts, more flexible than the current used one\n// we need to keep this regex for login validation as accounts might have been created using this regex\nexport const EMAIL_REGEXP = /^[a-z0-9!#$%&'*+\\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconEye: FunctionComponent = () => (\n    <svg\n        viewBox=\"0 0 576 512\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n    >\n        <path d=\"M288 144a110.94 110.94 0 0 0-31.24 5 55.4 55.4 0 0 1 7.24 27 56 56 0 0 1-56 56 55.4 55.4 0 0 1-27-7.24A111.71 111.71 0 1 0 288 144zm284.52 97.4C518.29 135.59 410.93 64 288 64S57.68 135.64 3.48 241.41a32.35 32.35 0 0 0 0 29.19C57.71 376.41 165.07 448 288 448s230.32-71.64 284.52-177.41a32.35 32.35 0 0 0 0-29.19zM288 400c-98.65 0-189.09-55-237.93-144C98.91 167 189.34 112 288 112s189.09 55 237.93 144C477.1 345 386.66 400 288 400z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconEye);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconEyeSlash: FunctionComponent = () => (\n    <svg\n        viewBox=\"0 0 640 512\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n    >\n        <path d=\"M634 471L36 3.51A16 16 0 0 0 13.51 6l-10 12.49A16 16 0 0 0 6 41l598 467.49a16 16 0 0 0 22.49-2.49l10-12.49A16 16 0 0 0 634 471zM296.79 146.47l134.79 105.38C429.36 191.91 380.48 144 320 144a112.26 112.26 0 0 0-23.21 2.47zm46.42 219.07L208.42 260.16C210.65 320.09 259.53 368 320 368a113 113 0 0 0 23.21-2.46zM320 112c98.65 0 189.09 55 237.93 144a285.53 285.53 0 0 1-44 60.2l37.74 29.5a333.7 333.7 0 0 0 52.9-75.11 32.35 32.35 0 0 0 0-29.19C550.29 135.59 442.93 64 320 64c-36.7 0-71.71 7-104.63 18.81l46.41 36.29c18.94-4.3 38.34-7.1 58.22-7.1zm0 288c-98.65 0-189.08-55-237.93-144a285.47 285.47 0 0 1 44.05-60.19l-37.74-29.5a333.6 333.6 0 0 0-52.89 75.1 32.35 32.35 0 0 0 0 29.19C89.72 376.41 197.08 448 320 448c36.7 0 71.71-7.05 104.63-18.81l-46.41-36.28C359.28 397.2 339.89 400 320 400z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconEyeSlash);\n","import { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { FormField, TextInput } from '../ui/form';\nimport { IconEye, IconEyeSlash } from '../ui/icon';\nimport { Toggle } from '../ui/toggle';\n\nexport interface PasswordFieldProps {\n    forgotPasswordUrl: string;\n}\n\nconst PasswordField: FunctionComponent<PasswordFieldProps> = ({\n    forgotPasswordUrl,\n}) => {\n    const renderInput = useCallback((props: FieldProps) => (\n        <Toggle openByDefault={ false }>\n            { ({ isOpen, toggle }) => (\n                <div className=\"form-field-password\">\n                    <TextInput\n                        { ...props.field }\n                        additionalClassName=\"form-input--withIcon\"\n                        id={ props.field.name }\n                        type={ isOpen ? 'text' : 'password' }\n                    />\n                    <a className=\"form-toggle-password form-input-icon\" href=\"#\" onClick={ toggle }>\n                        { isOpen ? <IconEye /> : <IconEyeSlash /> }\n                    </a>\n                </div>\n            ) }\n        </Toggle>\n    ), []);\n\n    const labelContent = useMemo(() => (\n        <TranslatedString id={ 'customer.password_label' } />\n    ), []);\n\n    const footer = useMemo(() => (\n        <a\n            data-test=\"forgot-password-link\"\n            href={ forgotPasswordUrl }\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n        >\n            <TranslatedString id=\"customer.forgot_password_action\" />\n        </a>\n    ), [forgotPasswordUrl]);\n\n    return <FormField\n        footer={ footer }\n        input={ renderInput }\n        labelContent={ labelContent }\n        name=\"password\"\n    />;\n};\n\nexport default memo(PasswordField);\n","import { withFormik, FormikProps } from 'formik';\nimport { noop } from 'lodash';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\nimport { object, string } from 'yup';\n\nimport { preventDefault } from '../common/dom';\nimport { withLanguage, TranslatedHtml, TranslatedLink, TranslatedString, WithLanguageProps } from '../locale';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Form, Legend } from '../ui/form';\n\nimport mapErrorMessage from './mapErrorMessage';\nimport { EMAIL_REGEXP } from './validationPatterns';\nimport CustomerViewType from './CustomerViewType';\nimport EmailField from './EmailField';\nimport PasswordField from './PasswordField';\n\nexport interface LoginFormProps {\n    canCancel?: boolean;\n    createAccountUrl: string;\n    email?: string;\n    forgotPasswordUrl: string;\n    isSigningIn?: boolean;\n    signInError?: Error;\n    viewType?: Omit<CustomerViewType, 'guest'>;\n    onCancel?(): void;\n    onChangeEmail?(email: string): void;\n    onSignIn(data: LoginFormValues): void;\n    onContinueAsGuest?(): void;\n}\n\nexport interface LoginFormValues {\n    email: string;\n    password: string;\n}\n\nconst LoginForm: FunctionComponent<LoginFormProps & WithLanguageProps & FormikProps<LoginFormValues>> = ({\n    canCancel,\n    createAccountUrl,\n    forgotPasswordUrl,\n    email,\n    isSigningIn,\n    language,\n    onCancel = noop,\n    onChangeEmail,\n    onContinueAsGuest,\n    signInError,\n    viewType = CustomerViewType.Login,\n}) => {\n    const changeEmailLink = useCallback(() => {\n        if (!email) {\n            return null;\n        }\n\n        return (\n            <p className=\"optimizedCheckout-contentSecondary\">\n                <TranslatedLink\n                    data={ { email } }\n                    id=\"customer.guest_could_login_change_email\"\n                    onClick={ onCancel }\n                    testId=\"change-email\"\n                />\n            </p>\n        );\n    }, [email, onCancel]);\n\n    return (\n        <Form\n            className=\"checkout-form\"\n            id=\"checkout-customer-returning\"\n            testId=\"checkout-customer-returning\"\n        >\n            <Fieldset legend={\n                <Legend hidden>\n                    <TranslatedString id=\"customer.returning_customer_text\" />\n                </Legend>\n            }\n            >\n                { signInError && <Alert\n                    testId=\"customer-login-error-message\"\n                    type={ AlertType.Error }\n                >\n                    { mapErrorMessage(signInError, key => language.translate(key)) }\n                </Alert> }\n\n                { viewType === CustomerViewType.SuggestedLogin &&\n                    <Alert type={ AlertType.Info }>\n                        <TranslatedHtml\n                            data={ { email } }\n                            id=\"customer.guest_could_login\"\n                        />\n                    </Alert> }\n\n                { viewType === CustomerViewType.Login && <p>\n                    <TranslatedHtml\n                        data={ { url: createAccountUrl } }\n                        id=\"customer.create_account_to_continue_text\"\n                    />\n                </p> }\n\n                { viewType === CustomerViewType.CancellableEnforcedLogin &&\n                    <Alert type={ AlertType.Info }>\n                        <TranslatedHtml\n                            data={ { email } }\n                            id=\"customer.guest_must_login\"\n                        />\n                    </Alert> }\n\n                { viewType === CustomerViewType.EnforcedLogin &&\n                    <Alert type={ AlertType.Error }>\n                        <TranslatedHtml\n                            data={ { url: createAccountUrl } }\n                            id=\"customer.guest_temporary_disabled\"\n                        />\n                    </Alert> }\n\n                { (viewType === CustomerViewType.Login || viewType === CustomerViewType.EnforcedLogin) &&\n                    <EmailField onChange={ onChangeEmail } /> }\n\n                <PasswordField forgotPasswordUrl={ forgotPasswordUrl } />\n\n                <div className=\"form-actions\">\n                    <Button\n                        id=\"checkout-customer-continue\"\n                        isLoading={ isSigningIn }\n                        testId=\"customer-continue-button\"\n                        type=\"submit\"\n                        variant={ ButtonVariant.Primary }\n                    >\n                        <TranslatedString id=\"customer.sign_in_action\" />\n                    </Button>\n\n                    { viewType === CustomerViewType.SuggestedLogin && <a\n                        className=\"button optimizedCheckout-buttonSecondary\"\n                        data-test=\"customer-guest-continue\"\n                        href=\"#\"\n                        id=\"checkout-guest-continue\"\n                        onClick={ preventDefault(onContinueAsGuest) }\n                    >\n                        <TranslatedString id=\"customer.continue_as_guest_action\" />\n                    </a> }\n\n                    { canCancel &&\n                        viewType !== CustomerViewType.EnforcedLogin &&\n                        viewType !== CustomerViewType.SuggestedLogin  &&\n                        <a\n                            className=\"button optimizedCheckout-buttonSecondary\"\n                            data-test=\"customer-cancel-button\"\n                            href=\"#\"\n                            id=\"checkout-customer-cancel\"\n                            onClick={ preventDefault(onCancel) }\n                        >\n                            <TranslatedString id=\"common.cancel_action\" />\n                        </a> }\n                </div>\n\n                { viewType === CustomerViewType.SuggestedLogin && changeEmailLink() }\n            </Fieldset>\n        </Form>);\n};\n\nexport default withLanguage(withFormik<LoginFormProps & WithLanguageProps, LoginFormValues>({\n    mapPropsToValues: ({\n        email = '',\n    }) => ({\n        email,\n        password: '',\n    }),\n    handleSubmit: (values, { props: { onSignIn } }) => {\n        onSignIn(values);\n    },\n    validationSchema: ({ language }: LoginFormProps & WithLanguageProps) =>\n        object({\n            email: string()\n                .max(256)\n                .matches(EMAIL_REGEXP, language.translate('customer.email_invalid_error'))\n                .required(language.translate('customer.email_required_error')),\n            password: string()\n                .required(language.translate('customer.password_required_error')),\n        }),\n})(memo(LoginForm)));\n","export default function mapErrorMessage(\n    error: any, // TODO: Export `RequestError`\n    translate: (key: string) => string\n): string {\n    const type = error.body && error.body.type;\n\n    switch (type) {\n    case 'throttled_login':\n        return translate('customer.sign_in_throttled_error');\n\n    case 'reset_password_before_login':\n        return translate('customer.reset_password_before_login_error');\n\n    default:\n        return translate('customer.sign_in_error');\n    }\n}\n","import { CheckoutSelectors, Customer as CustomerType, CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, GuestCredentials } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, Fragment, ReactNode } from 'react';\n\nimport { withCheckout, CheckoutContextProps } from '../checkout';\n\nimport CheckoutButtonList from './CheckoutButtonList';\nimport CustomerViewType from './CustomerViewType';\nimport GuestForm, { GuestFormValues } from './GuestForm';\nimport LoginForm from './LoginForm';\n\nexport interface CustomerProps {\n    viewType: CustomerViewType;\n    checkEmbeddedSupport?(methodIds: string[]): void;\n    onChangeViewType?(viewType: CustomerViewType): void;\n    onContinueAsGuest?(): void;\n    onContinueAsGuestError?(error: Error): void;\n    onReady?(): void;\n    onSignIn?(): void;\n    onSignInError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n}\n\nexport interface WithCheckoutCustomerProps {\n    canSubscribe: boolean;\n    checkoutButtonIds: string[];\n    createAccountUrl: string;\n    defaultShouldSubscribe: boolean;\n    email?: string;\n    firstName?: string;\n    forgotPasswordUrl: string;\n    isContinuingAsGuest: boolean;\n    isGuestEnabled: boolean;\n    isSigningIn: boolean;\n    signInError?: Error;\n    privacyPolicyUrl?: string;\n    requiresMarketingConsent: boolean;\n    clearError(error: Error): Promise<CheckoutSelectors>;\n    continueAsGuest(credentials: GuestCredentials): Promise<CheckoutSelectors>;\n    deinitializeCustomer(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    initializeCustomer(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\n    signIn(credentials: CustomerCredentials): Promise<CheckoutSelectors>;\n}\n\nclass Customer extends Component<CustomerProps & WithCheckoutCustomerProps> {\n    private draftEmail?: string;\n\n    componentDidMount(): void {\n        const { onReady = noop } = this.props;\n\n        onReady();\n    }\n\n    render(): ReactNode {\n        const { viewType } = this.props;\n\n        return (\n            <Fragment>\n                { (viewType === CustomerViewType.Guest) ?\n                    this.renderGuestForm() :\n                    this.renderLoginForm() }\n            </Fragment>\n        );\n    }\n\n    private renderGuestForm(): ReactNode {\n        const {\n            canSubscribe,\n            checkEmbeddedSupport,\n            checkoutButtonIds,\n            defaultShouldSubscribe,\n            deinitializeCustomer,\n            email,\n            initializeCustomer,\n            isContinuingAsGuest = false,\n            privacyPolicyUrl,\n            requiresMarketingConsent,\n            onUnhandledError = noop,\n        } = this.props;\n\n        return (\n            <GuestForm\n                canSubscribe={ canSubscribe }\n                checkoutButtons={\n                    <CheckoutButtonList\n                        checkEmbeddedSupport={ checkEmbeddedSupport }\n                        deinitialize={ deinitializeCustomer }\n                        initialize={ initializeCustomer }\n                        methodIds={ checkoutButtonIds }\n                        onError={ onUnhandledError }\n                    />\n                }\n                defaultShouldSubscribe={ defaultShouldSubscribe }\n                email={ this.draftEmail || email }\n                isContinuingAsGuest={ isContinuingAsGuest }\n                onChangeEmail={ this.handleChangeEmail }\n                onContinueAsGuest={ this.handleContinueAsGuest }\n                onShowLogin={ this.handleShowLogin }\n                privacyPolicyUrl={ privacyPolicyUrl }\n                requiresMarketingConsent={ requiresMarketingConsent }\n            />\n        );\n    }\n\n    private renderLoginForm(): ReactNode {\n        const {\n            createAccountUrl,\n            email,\n            forgotPasswordUrl,\n            isGuestEnabled,\n            isSigningIn,\n            onContinueAsGuest,\n            signInError,\n            viewType,\n        } = this.props;\n\n        return (\n            <LoginForm\n                canCancel={ isGuestEnabled }\n                createAccountUrl={ createAccountUrl }\n                email={ this.draftEmail || email }\n                forgotPasswordUrl={ forgotPasswordUrl }\n                isSigningIn={ isSigningIn }\n                onCancel={ this.handleCancelSignIn }\n                onChangeEmail={ this.handleChangeEmail }\n                onContinueAsGuest={ onContinueAsGuest }\n                onSignIn={ this.handleSignIn }\n                signInError={ signInError }\n                viewType={ viewType }\n            />\n        );\n    }\n\n    private handleContinueAsGuest: (formValues: GuestFormValues) => Promise<void> = async formValues => {\n        const {\n            canSubscribe,\n            continueAsGuest,\n            onChangeViewType = noop,\n            onContinueAsGuest = noop,\n            onContinueAsGuestError = noop,\n        } = this.props;\n\n        const email = formValues.email.trim();\n        try {\n            const { data } = await continueAsGuest({\n                email,\n                acceptsMarketingNewsletter: canSubscribe && formValues.shouldSubscribe ? true : undefined,\n                acceptsAbandonedCartEmails: formValues.shouldSubscribe ? true : undefined,\n            });\n\n            // todo: remove when SDK has been updated\n            const { hasAccount, isGuest } = data.getCustomer() as unknown as CustomerType & { hasAccount: boolean };\n\n            if (hasAccount && isGuest) {\n                return onChangeViewType(CustomerViewType.SuggestedLogin);\n            }\n\n            onContinueAsGuest();\n\n            this.draftEmail = undefined;\n        } catch (error) {\n            if (error.type === 'update_subscriptions') {\n                this.draftEmail = undefined;\n\n                return onContinueAsGuest();\n            }\n\n            if (error.status === 429) {\n                return onChangeViewType(CustomerViewType.EnforcedLogin);\n            }\n\n            if (error.status === 403) {\n                return onChangeViewType(CustomerViewType.CancellableEnforcedLogin);\n            }\n\n            onContinueAsGuestError(error);\n        }\n    };\n\n    private handleSignIn: (credentials: CustomerCredentials) => Promise<void> = async credentials => {\n        const {\n            signIn,\n            onSignIn = noop,\n            onSignInError = noop,\n        } = this.props;\n\n        try {\n            await signIn(credentials);\n            onSignIn();\n\n            this.draftEmail = undefined;\n        } catch (error) {\n            onSignInError(error);\n        }\n    };\n\n    private handleCancelSignIn: () => void = () => {\n        const {\n            clearError,\n            onChangeViewType = noop,\n            signInError,\n        } = this.props;\n\n        if (signInError) {\n            clearError(signInError);\n        }\n\n        onChangeViewType(CustomerViewType.Guest);\n    };\n\n    private handleChangeEmail: (email: string) => void = email => {\n        this.draftEmail = email;\n    };\n\n    private handleShowLogin: () => void = () => {\n        const { onChangeViewType = noop } = this.props;\n\n        onChangeViewType(CustomerViewType.Login);\n    };\n}\n\nexport function mapToWithCheckoutCustomerProps(\n    { checkoutService, checkoutState }: CheckoutContextProps\n): WithCheckoutCustomerProps | null {\n    const {\n        data: { getBillingAddress, getCheckout, getCustomer, getConfig },\n        errors: { getSignInError },\n        statuses: { isContinuingAsGuest, isSigningIn },\n    } = checkoutState;\n\n    const billingAddress = getBillingAddress();\n    const checkout = getCheckout();\n    const customer = getCustomer();\n    const config = getConfig();\n\n    if (!checkout || !config) {\n        return null;\n    }\n\n    const { checkoutSettings: {\n        privacyPolicyUrl,\n        requiresMarketingConsent,\n    } } = config;\n\n    return {\n        canSubscribe: config.shopperConfig.showNewsletterSignup,\n        checkoutButtonIds: config.checkoutSettings.remoteCheckoutProviders,\n        clearError: checkoutService.clearError,\n        continueAsGuest: checkoutService.continueAsGuest,\n        createAccountUrl: config.links.createAccountLink,\n        defaultShouldSubscribe: config.shopperConfig.defaultNewsletterSignup,\n        deinitializeCustomer: checkoutService.deinitializeCustomer,\n        email: (billingAddress && billingAddress.email) || (customer && customer.email),\n        firstName: customer && customer.firstName,\n        forgotPasswordUrl: config.links.forgotPasswordLink,\n        initializeCustomer: checkoutService.initializeCustomer,\n        isContinuingAsGuest: isContinuingAsGuest(),\n        isGuestEnabled: config.checkoutSettings.guestCheckoutEnabled,\n        isSigningIn: isSigningIn(),\n        privacyPolicyUrl,\n        requiresMarketingConsent,\n        signIn: checkoutService.signInCustomer,\n        signInError: getSignInError(),\n    };\n}\n\nexport default withCheckout(mapToWithCheckoutCustomerProps)(Customer);\n"],"sourceRoot":""}